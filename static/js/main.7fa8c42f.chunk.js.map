{"version":3,"sources":["utils/locale.ts","components/message.tsx","utils/transport.ts","utils/store.ts","utils/const.ts","components/total.tsx","utils/util.ts","components/table.tsx","utils/init.ts","components/append.tsx","components/auth.tsx","app.tsx","index.tsx","components/table.module.scss","components/total.module.scss","components/auth.module.scss","components/message.module.scss","components/append.module.scss"],"names":["locale","Message","memo","connect","state","message","type","text","className","style","mainUrl","developer","getData","paramsSrc","a","params","URLSearchParams","Object","assign","onRequest","toString","method","postData","command","initData","url","setWaiting","onSuccess","fetch","then","r","json","onNetworkError","data","status","messageShow","JSON","stringify","connectAddTask","props","form","FormData","entries","k","v","append","body","connectLogin","username","password","connectEdit","id","timerMessage","APP_PAGE_LOADED","APP_MESSAGE","APP_AUTH","APP_WAITING","actionPageLoaded","payload","actionMessage","actionAuth","token","localStorage","setItem","removeItem","initialState","list","total","page","waiting","getItem","ordered","columnName","direction","appStore","createStore","action","onMessage","dispatch","reloadData","ord","getCurrentOrder","getCurrentPage","sort_direction","sort_field","tasks","total_task_count","getState","getWaiting","getAuth","flag","clearTimeout","setTimeout","messageReset","TotalCount","pageMax","Math","round","refTimer","useRef","refInput","onPage","useCallback","nextPage","onNext","onPrev","useEffect","current","value","onChange","e","val","currentTarget","valueAsNumber","isNaN","block","ref","min","max","step","input","space","title","onClick","disabled","testField","trim","columnOrder","label","sortable","width","center","email","editable","image_path","Table","table","TableHeader","TableBody","map","key","TH","colName","active","OrderArrow","row","Row","useForm","register","getValues","useState","modify","setModify","onBegin","onCancel","onSave","floor","onFinish","maxWidth","textAlign","Cell","startsWith","src","icon","alt","name","defaultValue","schema","yup","shape","required","Append","reset","onSubmit","valid","validate","colSpan","Auth","Logout","Login","onLogout","onEnter","user_name","user_pass","placeholder","App","onAppInit","ReactDOM","render","StrictMode","store","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7fa8c42f.chunk.js","sourcesContent":["export const locale = {\r\n    nextPage: 'следующая',\r\n    prevPage: 'предыдущая',\r\n    colUserName: 'Имя пользователя',\r\n    colId: 'id',\r\n    colEmail: 'E-mail',\r\n    colStatus: 'Статус',\r\n    colText: 'Текст',\r\n    colImage: 'Картинка',\r\n    labelInfoMessage: 'Информационное сообщение:',\r\n    networkError: 'Сетевая ошибка...',\r\n    resultError: 'Ошибка при получении данных',\r\n    appendButton: 'Добавить задачу',\r\n    errorEmail: 'Некорректный email',\r\n    errorOther: 'Все поля обязательны к заполнению',\r\n    errorAuth: 'Требуется аторизация',\r\n    infoAdded: 'Задача добавлена',\r\n    infoSaved: 'Задача обновлена',\r\n    infoFinished: 'Задача завершена',\r\n    auth: 'Авторизация',\r\n    authName: 'имя пользователя',\r\n    authPass: 'пароль',\r\n    authSubmit: 'Войти',\r\n    authLogOut: 'Выйти',\r\n    modifyBegin: 'изм.',\r\n    modifyFinish: 'заверш.',\r\n    modifySave: 'сохр.',\r\n    modifyCancel: 'отм.',\r\n};\r\n","import {memo} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStore} from \"../utils/store\";\r\nimport style from './message.module.scss';\r\nimport {locale} from \"../utils/locale\";\r\n\r\nexport const Message = memo(connect(\r\n    (state: AppStore) => ({message: state.message})\r\n)(MessageElement));\r\n\r\nfunction MessageElement({message: {type, text}}: Pick<AppStore, 'message'>) {\r\n    return <div>\r\n        {locale.labelInfoMessage} <span className={type ? style[type] : void (0)}>{text}</span>\r\n    </div>;\r\n}\r\n","import {OrderedBy, OrderedDir, RequestGetMessage, RequestResult} from \"../types\";\r\nimport {messageShow, setWaiting} from \"./store\";\r\nimport {locale} from \"./locale\";\r\n\r\nconst mainUrl = 'https://uxcandy.com/~shapoval/test-task-backend/v2/';\r\nconst developer = 'Ivan-2020-12-08'; // Name\r\n\r\n\r\ninterface GetDataParams {\r\n    sort_field: OrderedBy\r\n    sort_direction: OrderedDir\r\n    page: number\r\n}\r\n\r\nexport async function getData(paramsSrc: GetDataParams): Promise<RequestGetMessage | null> {\r\n    const params = new URLSearchParams(Object.assign({developer}, paramsSrc as any));\r\n    return onRequest<RequestGetMessage>(mainUrl + '?' + params.toString(), {method: 'get'});\r\n}\r\n\r\nexport async function postData<T>(command: 'create' | 'login' |'edit', initData: RequestInit): Promise<T | null> {\r\n    const params = new URLSearchParams({developer});\r\n    return onRequest<T>(mainUrl + command + '?' + params.toString(), {...initData, method: 'post'});\r\n}\r\n\r\nasync function onRequest<T>(url: string, initData: RequestInit): Promise<T | null> {\r\n    setWaiting(true);\r\n    try {\r\n        return onSuccess(await fetch(url, initData).then(r => r.json()));\r\n    } catch (e) {\r\n        setWaiting(false);\r\n        onNetworkError();\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction onSuccess<T>(data: RequestResult<T | string>) {\r\n    setWaiting(false);\r\n    if (data.status === 'ok') {\r\n        return (data.message||true) as T;\r\n    } else {\r\n        onResultError(data.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction onResultError(message: any) {\r\n    messageShow('error', `+${locale.resultError}: ${JSON.stringify(message)}`);\r\n}\r\n\r\nfunction onNetworkError() {\r\n    messageShow('error', locale.networkError);\r\n}\r\n\r\nexport async function connectAddTask(props: { username: string, email: string, text: string }) {\r\n    const form = new FormData();\r\n    for (const [k, v] of Object.entries(props)) {\r\n        form.append(k, v);\r\n    }\r\n    return postData<ResultAdd>('create', {body: form});\r\n}\r\n\r\ninterface ResultAdd {\r\n    id: number\r\n    username: string\r\n    email: string\r\n    text: string\r\n    status: number\r\n}\r\n\r\n\r\nexport async function connectLogin(username: string, password: string) {\r\n    const form = new FormData();\r\n    form.append('username', username);\r\n    form.append('password', password);\r\n    return postData<{ token: string }>('login', {body: form});\r\n}\r\n\r\nexport async function connectEdit(id: number, props:{token: string, text?: string, status?: number}) {\r\n    const form = new FormData();\r\n    for (const [k, v] of Object.entries(props)) {\r\n        if(v!==void(0)) form.append(k, v.toString());\r\n    }\r\n    return postData<boolean>(`edit/${id}` as 'edit', {body: form});\r\n}\r\n","import {MessageEntity, MessageType, OrderedBy, OrderedDir, TaskItem} from \"../types\";\r\nimport {Action, createStore} from \"redux\";\r\nimport {getData} from \"./transport\";\r\nimport {locale} from \"./locale\";\r\n\r\nconst APP_PAGE_LOADED = 'APP_PAGE_LOADED';\r\nconst APP_MESSAGE = 'APP_MESSAGE';\r\nconst APP_AUTH = 'APP_AUTH';\r\nconst APP_WAITING = 'APP_WAITING';\r\n\r\nlet timerMessage: any;\r\n\r\n// ========================\r\n\r\ntype PageLoadedParams = Pick<AppStore, 'list' | 'total' | 'page' | 'ordered'>;\r\n\r\nexport function actionPageLoaded(params: PageLoadedParams): Action<typeof APP_PAGE_LOADED> & { payload: PageLoadedParams } {\r\n    return {\r\n        type: APP_PAGE_LOADED,\r\n        payload: params\r\n    }\r\n}\r\n\r\nfunction actionMessage(type: MessageType, text: string): Action<typeof APP_MESSAGE> & { payload: MessageEntity } {\r\n    return {\r\n        type: APP_MESSAGE,\r\n        payload: {type, text} as MessageEntity\r\n    }\r\n}\r\n\r\nfunction actionWaiting(waiting: boolean): Action<typeof APP_WAITING> & { payload: Pick<AppStore, 'waiting'> } {\r\n    return {\r\n        type: APP_WAITING,\r\n        payload: {waiting}\r\n    }\r\n}\r\n\r\nexport function actionAuth(token: string): Action<typeof APP_AUTH> & { payload: Pick<AppStore, 'token'> } {\r\n    if(token){\r\n        localStorage.setItem('token', token);\r\n    }\r\n    else{\r\n        localStorage.removeItem('token');\r\n    }\r\n\r\n    return {\r\n        type: APP_AUTH,\r\n        payload: {token}\r\n    }\r\n}\r\n\r\n// ========================\r\n\r\nexport type AppActions =\r\n    ReturnType<typeof actionPageLoaded> |\r\n    ReturnType<typeof actionMessage> |\r\n    ReturnType<typeof actionWaiting> |\r\n    ReturnType<typeof actionAuth>;\r\n\r\n\r\nconst initialState = {\r\n    list: [] as TaskItem[],\r\n    total: 0,\r\n    page: 0,\r\n    waiting: false,\r\n    token: localStorage.getItem('token')||'',\r\n    ordered: {\r\n        columnName: 'id' as OrderedBy,\r\n        direction: 'asc' as OrderedDir\r\n    },\r\n    message: {\r\n        text: '',\r\n        type: null as MessageType\r\n    } as MessageEntity,\r\n\r\n};\r\nexport type AppStore = typeof initialState;\r\nexport const appStore = createStore(appReducer);\r\n\r\nconst {dispatch} = appStore;\r\n\r\nexport function appReducer(state = initialState, action: AppActions): AppStore {\r\n    switch (action.type) {\r\n        case APP_PAGE_LOADED:\r\n        case APP_WAITING:\r\n        case APP_AUTH:\r\n            return {...state, ...action.payload};\r\n        case APP_MESSAGE:\r\n            return onMessage(state, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ========================\r\n\r\nexport function initData(list: TaskItem[], total: number) {\r\n    dispatch(actionPageLoaded({list, total, page: 1, ordered: {direction: 'asc', columnName: 'id'}}));\r\n}\r\n\r\nexport async function reloadData() {\r\n    const ord = getCurrentOrder();\r\n    const page = getCurrentPage();\r\n\r\n    const data = await getData({sort_direction: ord.direction, sort_field: ord.columnName, page});\r\n    if (data) {\r\n        dispatch(actionPageLoaded({\r\n            list: data.tasks,\r\n            total: +data.total_task_count,\r\n            page: page,\r\n            ordered: ord\r\n        }));\r\n    }\r\n}\r\n\r\nexport function getCurrentPage() {\r\n    return appStore.getState().page;\r\n}\r\n\r\nexport function getCurrentOrder() {\r\n    return appStore.getState().ordered;\r\n}\r\n\r\nexport function getWaiting() {\r\n    return appStore.getState().waiting;\r\n}\r\n\r\nexport function getAuth() {\r\n    const flag  = !!localStorage.getItem('token');\r\n    if(appStore.getState().token && !flag){\r\n        dispatch(actionAuth(''));\r\n        messageShow('error', locale.errorAuth);\r\n    }\r\n    return flag;\r\n}\r\n\r\nexport function setWaiting(flag: boolean) {\r\n    dispatch(actionWaiting(flag));\r\n}\r\n\r\n// ========================\r\n\r\nfunction onMessage(state: AppStore, message: MessageEntity) {\r\n    clearTimeout(timerMessage);\r\n    timerMessage = setTimeout(messageReset, 5000);\r\n    return {...state, message};\r\n}\r\n\r\nexport function messageReset() {\r\n    clearTimeout(timerMessage);\r\n    dispatch(actionMessage(null, ''))\r\n}\r\n\r\nexport function messageShow(type: MessageType, text: string) {\r\n    dispatch(actionMessage(type, text))\r\n}\r\n\r\n// ========================\r\n","export const numberEntriesPerPage = 3;\r\n","import {ChangeEvent, Dispatch, memo, useCallback, useEffect, useRef} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionPageLoaded, AppActions, AppStore, getCurrentOrder, getWaiting} from \"../utils/store\";\r\nimport {numberEntriesPerPage} from \"../utils/const\";\r\nimport style from './total.module.scss';\r\nimport {locale} from \"../utils/locale\";\r\nimport {getData} from \"../utils/transport\";\r\n\r\nexport const TotalCount = memo(connect(\r\n    (state: AppStore) => ({total: state.total, page: state.page})\r\n)(TotalCountElement));\r\n\r\ntype TotalCountProps = Pick<AppStore, 'total' | 'page'> & { dispatch: Dispatch<AppActions> };\r\n\r\nfunction TotalCountElement({total, page, dispatch}: TotalCountProps) {\r\n\r\n    const pageMax = Math.round(total / numberEntriesPerPage);\r\n\r\n    const refTimer = useRef<any>();\r\n    const refInput = useRef<HTMLInputElement>(null);\r\n\r\n    const onPage = useCallback(async (nextPage: number) => {\r\n        if (getWaiting()) return;\r\n        if (nextPage < 1 || nextPage > pageMax) return;\r\n        const ord = getCurrentOrder();\r\n\r\n        const data = await getData({sort_direction: ord.direction, sort_field: ord.columnName, page: nextPage});\r\n        if (data) {\r\n            dispatch(actionPageLoaded({\r\n                list: data.tasks,\r\n                total: +data.total_task_count,\r\n                page: nextPage,\r\n                ordered: ord\r\n            }));\r\n        }\r\n    }, [pageMax, dispatch]);\r\n\r\n    const onNext = useCallback(() => {\r\n        onPage(page + 1);\r\n    }, [onPage, page]);\r\n    const onPrev = useCallback(() => {\r\n        onPage(page - 1);\r\n    }, [onPage, page]);\r\n\r\n    useEffect(() => {\r\n        if (refInput.current) {\r\n            refInput.current.value = page + '';\r\n        }\r\n    }, [page]);\r\n\r\n    const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const val = e.currentTarget.valueAsNumber;\r\n        if (isNaN(val) || val < 1 || val > pageMax) return;\r\n        clearTimeout(refTimer.current);\r\n        refTimer.current = setTimeout(onPage, 800, val);\r\n    }, [refTimer, onPage, pageMax]);\r\n\r\n    return <div className={style.block}>\r\n        <div>\r\n            Всего записей: {total}<br/>\r\n            Текущая страница: <input ref={refInput} min={1} max={pageMax} step={1} onChange={onChange} type=\"number\"\r\n                                     className={style.input}/> / {pageMax}\r\n        </div>\r\n        <div className={style.space}/>\r\n        <button title={locale.prevPage} onClick={onPrev} disabled={page === 1}>←</button>\r\n        <button title={locale.nextPage} onClick={onNext} disabled={page === pageMax}>→</button>\r\n    </div>;\r\n}\r\n","\r\n\r\nexport function testField(text: string){\r\n    //.replace(/</g, '&lt;').replace(/>/g, '&gt;')\r\n    return text.trim();\r\n}\r\n","import {Dispatch, memo, useCallback, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    actionPageLoaded,\r\n    AppActions,\r\n    AppStore, getAuth,\r\n    getCurrentPage,\r\n    getWaiting,\r\n    messageShow,\r\n    reloadData\r\n} from \"../utils/store\";\r\nimport {ColumnName, OrderedBy, TaskItem} from \"../types\";\r\nimport {connectEdit, getData} from \"../utils/transport\";\r\nimport style from './table.module.scss';\r\nimport {locale} from \"../utils/locale\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {testField} from \"../utils/util\";\r\n\r\n//, 'image_path'\r\nconst columnOrder = ['id', 'username', 'email', 'status', 'text'] as ColumnName[];\r\n\r\nconst columnName: { [s in ColumnName]: { label: string, sortable: boolean, width: number, center: boolean, editable?: boolean } } = {\r\n    id: {label: locale.colId, sortable: true, width: 4, center: true},\r\n    username: {label: locale.colUserName, sortable: true, width: 10, center: true},\r\n    email: {label: locale.colEmail, sortable: true, width: 10, center: false},\r\n    status: {label: locale.colStatus, sortable: true, width: 4, center: true},\r\n    text: {label: locale.colText, sortable: false, width: 15, center: false, editable: true},\r\n    image_path: {label: locale.colImage, sortable: false, width: 4, center: true},\r\n};\r\n\r\n\r\nexport function Table() {\r\n    return <table className={style.table}>\r\n        <TableHeader/>\r\n        <TableBody/>\r\n    </table>;\r\n}\r\n\r\nexport const TableHeader = memo(connect(\r\n    (state: AppStore) => ({token: state.token})\r\n)(TableHeaderElement));\r\n\r\nfunction TableHeaderElement({token}: Pick<AppStore, 'token'>) {\r\n    return <thead>\r\n    <tr>\r\n        {columnOrder.map(key =>\r\n            <TH key={key} colName={key} {...columnName[key]}/>\r\n        )}\r\n        {\r\n            token ? <th/> : null\r\n        }\r\n    </tr>\r\n    </thead>;\r\n}\r\n\r\nexport const TH = memo(connect(\r\n    (state: AppStore) => ({ordered: state.ordered})\r\n)(THElement));\r\n\r\ntype THProps =\r\n    Pick<AppStore, 'ordered'>\r\n    & { label: string, sortable: boolean, colName: ColumnName, dispatch: Dispatch<AppActions> };\r\n\r\nfunction THElement({label, sortable, colName, ordered, dispatch}: THProps) {\r\n    const onClick = useCallback(async () => {\r\n        if (getWaiting()) return;\r\n        const direction = colName === ordered.columnName ? (ordered.direction === 'asc' ? 'desc' : 'asc') : 'asc';\r\n        const page = getCurrentPage();\r\n        const data = await getData({sort_direction: direction, sort_field: colName as OrderedBy, page});\r\n        if (data) {\r\n            dispatch(actionPageLoaded({\r\n                list: data.tasks,\r\n                total: +data.total_task_count,\r\n                page,\r\n                ordered: {direction, columnName: colName as OrderedBy}\r\n            }));\r\n        }\r\n    }, [colName, dispatch, ordered]);\r\n\r\n    return <th onClick={sortable ? onClick : void (0)} className={sortable ? style.active : void (0)}>\r\n        <OrderArrow colName={colName} ordered={ordered}/>\r\n        {label}\r\n    </th>;\r\n}\r\n\r\nfunction OrderArrow({colName, ordered: {columnName, direction}}: Pick<AppStore, 'ordered'> & { colName: ColumnName }) {\r\n    if (colName === columnName) {\r\n        return <span>{direction === 'asc' ? '↓' : '↑'}</span>;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const TableBody = memo(connect(\r\n    (state: AppStore) => ({list: state.list, token: state.token})\r\n)(TableBodyElement));\r\n\r\nfunction TableBodyElement({list, token}: Pick<AppStore, 'list' | 'token'>) {\r\n    return <tbody>\r\n    {list.map(row => <Row key={row.id} row={row} token={token}/>)}\r\n    </tbody>;\r\n}\r\n\r\nfunction Row({row, token}: { row: TaskItem, token: string }) {\r\n    const {register, getValues} = useForm();\r\n    const [modify, setModify] = useState(false);\r\n\r\n    const onBegin = useCallback(() => {\r\n        setModify(true);\r\n    }, [setModify]);\r\n    const onCancel = useCallback(() => {\r\n        setModify(false);\r\n    }, []);\r\n    const onSave = useCallback(async () => {\r\n        setModify(false);\r\n        if(!getAuth()) return;\r\n        let {text} = getValues();\r\n        text = testField(text);\r\n        const status = Math.floor(row.status/10)*10 + 1;\r\n        const data = await connectEdit(row.id, {token, text, status});\r\n        if (data) {\r\n            await reloadData();\r\n            messageShow('info', locale.infoSaved);\r\n        }\r\n    }, [getValues, row, token]);\r\n\r\n    const onFinish = useCallback(async() => {\r\n        setModify(false);\r\n        if(!getAuth()) return;\r\n        let {text} = getValues();\r\n        text = testField(text);\r\n        const status = 10 + (row.status%10);\r\n        const data = await connectEdit(row.id, {token, text, status});\r\n        if (data) {\r\n            await reloadData();\r\n            messageShow('info', locale.infoFinished);\r\n        }\r\n    }, [getValues, row, token]);\r\n\r\n\r\n    return <tr className={style.row}>\r\n        {columnOrder.map(label => <td style={{\r\n            width: `${columnName[label].width}em`,\r\n            maxWidth: `${columnName[label].width}em`,\r\n            textAlign: columnName[label].center ? 'center' : void (0)\r\n        }} title={row[label] as string}>\r\n            <Cell key={label} label={label} row={row} modify={modify} register={register}/>\r\n        </td>)}\r\n        {\r\n            token\r\n                ? <td>\r\n                    {modify\r\n                        ? <>\r\n                            <button onClick={onSave}>{locale.modifySave}</button>\r\n                            <button onClick={onCancel}>{locale.modifyCancel}</button>\r\n                            <button onClick={onFinish}>{locale.modifyFinish}</button>\r\n                        </>\r\n                        : <button onClick={onBegin}>{locale.modifyBegin}</button>\r\n                    }\r\n                </td>\r\n                : null\r\n        }\r\n    </tr>\r\n}\r\n\r\nfunction Cell({label, row, modify, register}: { label: ColumnName, row: TaskItem, modify: boolean, register: any }) {\r\n    if (label.startsWith('image')) {\r\n        return <img src={row[label] as string} className={style.icon} alt=\"\"/>;\r\n    } else {\r\n        return <>{\r\n            modify && columnName[label].editable\r\n                ? <input name={label} defaultValue={row[label]} ref={register}/>\r\n                : row[label]\r\n        }</>;\r\n    }\r\n}\r\n","import {initData, messageReset, messageShow} from \"./store\";\r\nimport {getData} from \"./transport\";\r\n\r\nexport async function onAppInit() {\r\n\r\n    messageShow('info', 'Загрузка данных');\r\n    const data = await getData({page: 1, sort_direction: 'asc', sort_field: 'id'});\r\n    if (data) {\r\n        initData(data.tasks, +data.total_task_count);\r\n        messageReset();\r\n    }\r\n}\r\n","import {locale} from \"../utils/locale\";\r\nimport style from './append.module.scss';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useCallback} from \"react\";\r\nimport * as yup from \"yup\";\r\nimport {messageShow, reloadData} from \"../utils/store\";\r\nimport {connectAddTask} from \"../utils/transport\";\r\nimport {testField} from \"../utils/util\";\r\n\r\nconst schema = yup.object().shape({\r\n    email: yup.string().email().required()\r\n});\r\n\r\nexport function Append() {\r\n    const {register, getValues, reset} = useForm();\r\n\r\n    const onSubmit = useCallback(async () => {\r\n        let {username, email, text} = getValues() as { username: string, email: string, text: string };\r\n        username = testField(username);\r\n        text = testField(text);\r\n        let valid = false;\r\n        try {\r\n            valid = await (schema.validate({email}) as Promise<any>);\r\n        } catch (e) {\r\n        }\r\n\r\n        if (valid && username && text) {\r\n            const data = await connectAddTask({username, text, email});\r\n            if (data) {\r\n                if (data.id) {\r\n                    messageShow('info', locale.infoAdded);\r\n                    reset({username: '', email: '', text: ''});\r\n                    await reloadData();\r\n                } else {\r\n                    messageShow('error', JSON.stringify(data));\r\n                }\r\n            }\r\n        } else {\r\n            if (!valid) {\r\n                messageShow('error', locale.errorEmail);\r\n            } else {\r\n                messageShow('error', locale.errorOther);\r\n            }\r\n        }\r\n\r\n    }, [getValues, reset]);\r\n\r\n    return <table className={style.block}>\r\n        <tr>\r\n            <td>{locale.colUserName}:</td>\r\n            <td><input name=\"username\" ref={register}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td>{locale.colEmail}:</td>\r\n            <td><input name=\"email\" ref={register}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td>{locale.colText}:</td>\r\n            <td><input name=\"text\" ref={register}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td colSpan={2}>\r\n                <button onClick={onSubmit}>{locale.appendButton}</button>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n}\r\n","import {useForm} from \"react-hook-form\";\r\nimport {locale} from \"../utils/locale\";\r\nimport {Dispatch, memo, useCallback} from \"react\";\r\nimport {connectLogin} from \"../utils/transport\";\r\nimport style from './auth.module.scss'\r\nimport {connect} from \"react-redux\";\r\nimport {actionAuth, AppActions, AppStore} from \"../utils/store\";\r\n\r\n\r\nexport const Auth = memo(connect(\r\n    (state: AppStore) => ({token: state.token})\r\n)(AuthElement));\r\n\r\nfunction AuthElement({token, dispatch}:Pick<AppStore, 'token'> & {dispatch: Dispatch<AppActions>}) {\r\n    if(token){\r\n        return <Logout dispatch={dispatch}/>;\r\n    }\r\n    else{\r\n        return <Login dispatch={dispatch}/>;\r\n    }\r\n}\r\n\r\nfunction Logout({dispatch}:{dispatch: Dispatch<AppActions>}){\r\n    const onLogout = useCallback(()=>{\r\n        dispatch(actionAuth(''));\r\n    },[dispatch]);\r\n\r\n    return <div className={style.block}>\r\n        <button onClick={onLogout}>{locale.authLogOut}</button>\r\n    </div>\r\n}\r\n\r\nfunction Login({dispatch}:{dispatch: Dispatch<AppActions>}){\r\n    const {register, getValues} = useForm();\r\n\r\n    const onEnter = useCallback(async () => {\r\n        let {user_name, user_pass} = getValues() as { user_name: string, user_pass: string };\r\n        user_name = user_name.trim();\r\n        user_pass = user_pass.trim();\r\n\r\n        const data = await connectLogin(user_name, user_pass);\r\n        if (data) {\r\n            dispatch(actionAuth(data.token));\r\n        }\r\n\r\n    }, [getValues, dispatch]);\r\n    return <div className={style.block}>\r\n        <span className={style.label}>{locale.auth}:</span>\r\n        <input placeholder={locale.authName} name=\"user_name\" ref={register}/>\r\n        <input placeholder={locale.authPass} name=\"user_pass\" ref={register}/>\r\n        <button onClick={onEnter}>{locale.authSubmit}</button>\r\n    </div>\r\n\r\n}\r\n","import {Message} from \"./components/message\";\r\nimport {TotalCount} from \"./components/total\";\r\nimport {Table} from \"./components/table\";\r\nimport {useEffect} from \"react\";\r\nimport {onAppInit} from \"./utils/init\";\r\nimport {Append} from \"./components/append\";\r\nimport {Auth} from \"./components/auth\";\r\n\r\n\r\nexport function App() {\r\n    useEffect(() => {\r\n        onAppInit();\r\n    }, []);\r\n    return <div>\r\n        <Message/>\r\n        <Table/>\r\n        <TotalCount/>\r\n        <Append/>\r\n        <Auth/>\r\n    </div>;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './app';\r\nimport {Provider} from \"react-redux\";\r\nimport {appStore} from \"./utils/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={appStore}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// Администратор имеет возможность редактировать текст задачи и поставить галочку о выполнении.\r\n// Выполненные задачи в общем списке выводятся с соответствующей отметкой.\r\n\r\n// В общем списке задача должна отображаться уже с двумя отметками: \"выполнено\" и “отредактировано администратором”.\r\n// Отметка “отредактировано администратором” должна появляться только в случае изменения текста в теле задачи.\r\n\r\n// 9) Открыть параллельно приложение в новой вкладке. Разлогиниться в новой вкладке.\r\n// В этой вкладке не должно быть возможности редактировать задачу. Вернуться в предыдущую вкладку.\r\n// Отредактировать задачу и сохранить. Отредактированная задача не должна быть сохранена. Приложение должно запросить авторизацию.\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"table_icon__2Imo9\",\"active\":\"table_active__hX7zo\",\"table\":\"table_table__3AulV\",\"row\":\"table_row__-PzFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"total_block__21m97\",\"space\":\"total_space__3ZC3a\",\"input\":\"total_input__YgjKk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"auth_block__2CC3a\",\"label\":\"auth_label__33o7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"message_info__2MbjQ\",\"error\":\"message_error__ge_rF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"append_block__2xvpr\"};"],"sourceRoot":""}